#include <stdio.h>
#include <algorithm>
#include <string.h>

const int kN = 800000 + 5;
const int MOD = (int)1e9 + 7;
int n, m;

inline void add(int &a, int b)
{
    a += b;
    if (a >= MOD) a -= MOD;
}

struct SegmentTree {
    int t[kN << 2][2][2];

    void build(int l, int r, int rt)
    {
        if (l == r) {
            for (int i = 0; i < 2; ++ i)
                for (int j = 0; j < 2; ++ j)
                    t[rt][i][j] = i == j && j == 0;
            return ;
        }
        int mid = l + r >> 1;
        build(l, mid, rt << 1);
        build(mid + 1, r, rt << 1 | 1);
        up(rt);
    }

    void up(int rt)
    {
        memset(t[rt], 0, sizeof(t[rt]));
        for (int i = 0; i < 2; ++ i)
            for (int j = 0; j < 2; ++ j)
                for (int k = 0; k < 2; ++ k)
                    add(t[rt][i][k], t[rt << 1][i][j] * 1ll * t[rt << 1 | 1][j][k] % MOD);
    }

    void modify(int w, int z, int s, int l, int r, int rt)
    {
        if (l == r) {
            if (z + 1 == w)
                add(t[rt][1][0], s);
            else if (z == w)
                add(t[rt][0][0], s);
            else
                add(t[rt][0][1], s);
            return ;
        }

        int mid = l + r >> 1;
        if (w <= mid) modify(w, z, s, l, mid, rt << 1);
        else modify(w, z, s, mid + 1, r, rt << 1 | 1);
        up(rt);
    }
} sgt;

int main()
{
    int cas;
    scanf("%d", &cas);
    for (int ca = 1; ca <= cas; ++ ca) {
        scanf("%d%d", &n, &m);
        int w, aw, bw, d, ad, bd, s, as, bs;
        scanf("%d%d%d%d%d%d%d%d%d", &w, &aw, &bw, &d, &ad, &bd, &s, &as, &bs);
        sgt.build(1, n, 1);
        int result = 0;
        for (int i = 1; i <= m; ++ i) {
            int z = std::max(1, std::min(n, w + d - 1));
            sgt.modify(w, z, s, 1, n, 1);

            add(result, sgt.t[1][0][0]);

            w = (aw * 1ll * w + bw) % n + 1;
            d = (ad * 1ll * d + bd) % 3;
            s = (as * 1ll * s + bs) % 1000000000 + 1;
        }
        printf("Case #%d: %d\n", ca, result);
    }
}
